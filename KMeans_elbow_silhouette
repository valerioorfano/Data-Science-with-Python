#K-Means 
from sklearn import metrics
import numpy as np
import matplotlib.pyplot as plt
from sklearn.cluster import KMeans
from scipy.spatial.distance import cdist
from sklearn import metrics
from sklearn.preprocessing import scale
from sklearn.datasets import load_digits
from sklearn.decomposition import PCA 
numpy.set_printoptions(threshold='nan')
digits = load_digits()
#In order to use K-Means we need to standardize the data
X = scale(digits.data)
K = range(2,15)
for j in ('k-means++','random'):
    meandistortions = []    
    silhouette = []    
    for k in K:
        kmeans = KMeans(n_clusters=k, init=j).fit(X)
        meandistortions.append(np.sum(np.min(cdist(X,kmeans.cluster_centers_,'euclidean'),axis=1))/ X.shape[0])  
        silhouette.append(metrics.silhouette_score(X, kmeans.labels_, metric='euclidean'))
    plt.figure(figsize=(6,6))
    plt.plot(K,meandistortions, 'bx-')
    plt.xlabel("K")
    plt.xticks([x for x in range(1,20)])
    plt.ylabel("Mean Distortion")
    plt.title("Selecting K using elbow method " + j)    
    print "silhouette with " + j + " %i" % np.where(silhouette == np.max(silhouette))
    print "Max Silhouette: {0:.3f}".format(np.max(silhouette))
#silhouette with k-means++ 11
#Max Silhouette: 0.158
#silhouette with random 9
#Max Silhouette: 0.157
#Let's plot the data over plot 2-dimension
#Visualize the results on PCA-reduced data    
reduced_data = PCA(n_components=2).fit_transform(X)
kmeans = KMeans(init='k-means++', n_clusters=11)
kmeans.fit(reduced_data)
h = .02 
x_min, x_max = reduced_data[:, 0].min() + 1, reduced_data[:, 0].max() - 1
y_min, y_max = reduced_data[:, 1].min() + 1, reduced_data[:, 1].max() - 1
xx, yy = np.meshgrid(np.arange(x_min, x_max, h), np.arange(y_min, y_max, h))
Z = kmeans.predict(np.c_[xx.ravel(), yy.ravel()])
Z = Z.reshape(xx.shape)
plt.figure(1)
plt.clf()
plt.imshow(Z, interpolation='nearest',extent=(xx.min(), xx.max(), yy.min(), yy.max()),cmap=plt.cm.Paired,aspect='auto', origin='lower')
plt.plot(reduced_data[:, 0], reduced_data[:, 1], 'k.', markersize=2)
# Plot the centroids as a white X
centroids = kmeans.cluster_centers_
plt.scatter(centroids[:, 0], centroids[:, 1],marker='x', s=169, linewidths=3,color='w', zorder=10)
